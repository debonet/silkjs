<let nbl adddialog="{{false}}">

	<defmacro name="mytable">
		<let myinner="{{_._inner}}"><a>{{_.myinner}}</a></let>
	</defmacro>

	<!-- -------------------------------------- -->
	<defun name="fcDaysInMonth">
		return function(tm){
			var date = new Date(tm);
			return new Date(date.getFullYear(), date.getMonth()+1, 0).getDate();
		}
	</defun>

	<!-- -------------------------------------- -->
	<defun name="fcFirstDOWOfMonth">
		return function(tm){
			var date = new Date(tm);
			return new Date(date.getFullYear(), date.getMonth(), 1).getDay();
		}
	</defun>

	<!-- -------------------------------------- -->
	<defun name="ftmFromS">
		return function(s){
			return  Date.parse(s);
		}
	</defun>

	<!-- -------------------------------------- -->
	<defun name="ftmDayOfMonth">
		return function(tm, cDays){
			var date = new Date(tm);
			return new Date(date.getFullYear(), date.getMonth(), cDays).getTime();
		}
	</defun>

	<!-- -------------------------------------- -->
	<defun name="fsTimeForTm">
		return function(tm){
			var date = new Date(tm);
			return (
				""
				+	((date.getHours()-1)%12+1)
				+ ":"
				+ (date.getMinutes() < 10?"0":"")
				+ date.getMinutes() 
				+ (date.getHours() < 12 ? "am" : "pm")
			);
		}
	</defun>

	<!-- -------------------------------------- -->
	<defun name="fsForTm">
		return function(tm){
			var date = new Date(tm);
			return (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear()
			+ " " + _.fsTimeForTm(tm);
		}
	</defun>

	<!-- -------------------------------------- -->
	<defun name="ftmForTmAndHourMin">
		return function(tm,nHour,nMin){
			var date = new Date(tm);
			return new Date(date.getFullYear(), date.getMonth(), date.getDate(), nHour, nMin).getTime();
		}
	</defun>

	<!-- -------------------------------------- -->
	<defun name="faFilterByDate">
		// TODO: put real iCal interpreter here, recurrence rules, etc.
	return function(vaEvents, tmStart, tmEnd){

		var vaOut = [];
		each(vaEvents,function(aEvent){
			if (!("tm" in aEvent)){
			D(aEvent);
				aEvent.fDefine('tm', _.ftmFromS(aEvent.stm));
			}
			if (aEvent.tm > tmStart && aEvent.tm < tmEnd){
				vaOut.push(aEvent);
			}
		});
		vaOut.sort(function(a1,a2){
			return a1.tm-a2.tm;
		});
		return vaOut;
		}

	</defun>



	<!-- -------------------------------------- -->
	<defelt name="monthlyview" tm="" events="{{ [] }}" onclick="{{_.__identity__}}">
		return function(){
			var startdow=_.fcFirstDOWOfMonth(_.tm);
			var days=_.fcDaysInMonth(_.tm);
			var weeks=Math.ceil((startdow + days)/7);
			var jqOut = $('<div class="monthly"></div>');
			for (var week=0; week < weeks; week++){
				var jqRow = $('<div class="monthly-row"></div>');
				for (var dow=0; dow<7; dow++){
					var calbox = week * 7 + dow;
					var day = week * 7 + dow - startdow + 1;

					if (calbox < startdow || calbox >= days + startdow){
						jqRow.append($('<div class="monthly-cell blank"></div>'));
					}
					else {
						var eventsDay=_.faFilterByDate(
							_.events, 
							_.ftmDayOfMonth(_.tm, day),	
							_.ftmDayOfMonth(_.tm, day+1) 
						);
						var jqCell=	$('<div class="monthly-cell">' + day + '</div>');
						jqCell.on('click',(function(day){
							return function(){_.onclick(_.ftmDayOfMonth(_.tm, day));};}
						)(day));
						each(eventsDay, function(event){
							jqCell.append(
								'<div>' 
								+ _.fsTimeForTm(event["tm"]) + " - " + event["summary"] 
								+ "</div>"
							);
						});
						jqRow.append(jqCell);
					}
				}
				jqOut.append(jqRow);
			}
			return jqOut;
		}
	</defelt>
	
	<!-- -------------------------------------- -->
	<defelt name="click-blocker">
		var jq=$("&lt;div class='dialog-blocker' style='width:100%; height: 100%; position: fixed;top:0; left:0;'>&lt;/div>");
		jq.on('click',function(event){event.stopPropagation();});
		return function(){
			return jq;
		}

	</defelt>

	<defmacro name="dialog" model="">
		<if test="{{_[_.model]}}" myinner="{{_._inner}}">
			<click-blocker></click-blocker>
				<div class="dialog-body">
					<div class="dialog-close" click="_[_.model]=false">X</div>
					{{_.myinner}}
				</div>
			</div>
		</if>
	</defmacro>

	
	<!-- -------------------------------------- -->
	<defmacro name="question" label="" element="input" inputtype="text">
		<div passattr="class, style">
			<div>
				{{_.label}}
			</div>
			<div>
				<dynamic 
					element="{{_.element}}" 
					type="{{_.inputtype}}"
					min="{{_.min}}"
					max="{{_.max}}"
					model="{{_.model}}"
				>{{_._inner}}</dynamic>
			</div>
		</div>
	</defmacro>


	<style>
	 .dialog-body {
		 position: fixed;
		 z-index:1000;
		 box-shadow: 0px 0px 5px 5px rgba(0,0,0,.2);
		 border: 8px solid #58f;
		 background: #fff;
		 padding: 20px;
		 top: 10%;
		 left: 20%;
		 width: 60%;
	 }
	 .dialog-close {
		 font-family: Helvetica, Sans-Serif;
		 text-align: center;
		 font-weight: bold;
		 position: absolute;
		 right:-8px;
		 top:-8px;
		 content:"X";
		 line-height: 22px;
		 width: 20px;
		 height: 20px;
		 color: #fff;
		 background: #58f;
	 }

	 .monthly-cell {
		 display: inline-block;
		 width: 100%;
		 max-width: 14%;
		 height: 5em;
		 border-top: 1px solid black;
		 border-left: 1px solid black;
		 overflow: hidden;
		 white-space: nowrap;
		 text-overflow: ellipsis;
		 font-size:20px;
	 }
	 .monthly {
		 font-size:0px;
	 }
	 .monthly-row {
	 }
	 .monthly-cell div {
		 font-size:12px;
	 }
	 
	 .monthly-cell.blank {
		 background:#ddd;
	 }
	</style>


	<let 
			events='{{
			[
			{
			stm: "2014-8-1 08:00:00",
			summary: "planning meeting"
			},
			{
			stm: "2014-8-3 12:00:00",
			summary: "lunch with joe"
			}
			]
			}}'

			tm="{{_.ftmFromS('8/20/2014')}}" 
			date="date"
			summary="summary"
		>

		<defun name="neweventclick">
			return function(tm){
				_.adddialog = true; 
				scope.defvar('tm',tm);
				_.summary='';
			}
		</defun>

		<monthlyview 
			tm="{{_.tm}}"
			events="{{_.events}}"
			onclick="{{_.neweventclick}}"
		>
		</monthlyview>

		<!-- -------------------------------------- -->
		<dialog model="adddialog">
			<let hour="{{10}}" minutes="{{0}}">
				<let tmnew="{{_.ftmForTmAndHourMin(_.tm,_.hour,_.minutes)}}">
					Add New Event On {{_.fsForTm(_.tmnew)}}
					<question label="Hour" inputtype="range" min="0" max="24" model="hour"></question>
					<question label="Minute" inputtype="range" min="0" max="60" model="minutes"></question>
					<question label="Description" element="textarea" model="summary"></question>
					<button click="_.events.push({tm:_.tmnew,summary:_.summary}); _.adddialog = false;">
						OK
					</button>
				</let>
			</let>
		</dialog>
	
	</let>
	
</let>


